Array type literal  a ::= [n]t
                        | [n]a, n ∈ int, a ∈ T
                            _
Array literal       al ::= a{e}, al ∈ e

Array get           ag ::= e[e], aa ∈ e

Array set           as ::= e[e] = e

Array length      alen ::= len(e), alen ∈ e

Array type name     ta, ta ∈ t

Value type name     tv ::= ts | ta

Method declaration     ::= func (x tv) mM {return e} 
                         | func (x tv) mM { as; return e}

An array type can have either a type name `t` as its element type, or another
array type literal `a`, allowing for n-dimensional array types literals (e.g.
`[2][3]any`), without having to first declare a new named array type using the
`type t T` syntax.

It might be useful to also permit constant expressions, (such as `len(e)`, where
`e` is of an array type), in place of `n`, but this may cause difficulties when
we get to the generic array size version, since we would need to ensure all
concrete instantiations of the generically-sized array have a size within
bounds.
