@book{tapl,
  author    = {Pierce, Benjamin C.},
  title     = {Types and Programming Languages},
  year      = {2002},
  isbn      = {0262162091},
  publisher = {The MIT Press},
  edition   = {1},
  abstract  = {A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems -- and of programming languages from a type-theoretic perspective -- has important applications in software engineering, language design, high-performance compilers, and security.This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.}
}
@article{fg,
  author     = {Griesemer, Robert and Hu, Raymond and Kokke, Wen and Lange, Julien and Taylor, Ian Lance and Toninho, Bernardo and Wadler, Philip and Yoshida, Nobuko},
  title      = {Featherweight {Go}},
  year       = {2020},
  issue_date = {November 2020},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {4},
  number     = {OOPSLA},
  url        = {https://doi.org/10.1145/3428217},
  doi        = {10.1145/3428217},
  abstract   = {We describe a design for generics in Go inspired by previous work on Featherweight Java by Igarashi, Pierce, and Wadler. Whereas subtyping in Java is nominal, in Go it is structural, and whereas generics in Java are defined via erasure, in Go we use monomorphisation. Although monomorphisation is widely used, we are one of the first to formalise it. Our design also supports a solution to The Expression Problem.},
  journal    = {{Proc. ACM Program. Lang.}},
  month      = {11},
  articleno  = {149},
  numpages   = {29},
  keywords   = {Go, Monomorphisation, Generics}
}
@online{rustConstBlog,
  author       = {{The const generics project group}},
  title        = {Const generics {MVP} hits beta!},
  organization = {Rust Blog},
  url          = {https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html},
  year         = {2021},
  month        = {11},
  day          = {26},
  urldate      = {2023-11-12}
}
@online{genericsProposal,
  title        = {Type Parameters Proposal},
  author       = {Taylor, Ian Lance and Griesemer, Robert},
  organization = {Google Open Source},
  url          = {https://go.googlesource.com/proposal/+/HEAD/design/43651-type-parameters.md},
  year         = {2021},
  month        = {11},
  day          = {20},
  urldate      = {2023-11-16}
}
@online{spec,
  title        = {The {Go} Programming Language Specification},
  organization = {Google Open Source},
  url          = {https://go.dev/ref/spec},
  year         = {2023},
  month        = {8},
  day          = {2},
  urldate      = {2023-11-16}
}

@online{javaSpec,
  title        = {The {Java}\textsuperscript{\textregistered} Language Specification},
  author       = {Gosling, James
                  and Joy, Bill
                  and Steele, Guy
                  and Bracha, Gilad
                  and Buckley, Alex
                  and Smith, Daniel
                  and Bierman, Gavin},
  organization = {Oracle},
  edition      = {Java SE 21 Edition},
  url          = {https://docs.oracle.com/javase/specs/jls/se21/html/index.html},
  year         = {2023},
  month        = {08},
  day          = {23},
  urldate      = {2023-11-21}
}

@online{rustSpec,
  title   = {The {Rust} Reference},
  url     = {https://doc.rust-lang.org/stable/reference/},
  year    = {2020},
  month   = {8},
  day     = {3},
  urldate = {2023-11-21}
}

@online{cSharpArrays,
  title        = {C\# reference: Arrays},
  author       = {Wagner, Bill},
  organization = {Microsoft},
  url          = {https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/arrays},
  year         = {2023},
  month        = {9},
  day          = {1},
  urldate      = {2023-11-23}
}

@techreport{cSpec,
  title       = {Programming languages — {C}},
  author      = {ISO/IEC},
  type        = {ISO/IEC},
  number      = {9899:2018},
  institution = {ISO/IEC},
  address     = {Geneva, Switzerland},
  year        = {2018},
  month       = {6},
  edition     = {4}
}

@online{survey2021,
  title        = {{Go} Developer Survey 2021 Results},
  author       = {Merrick, Alice},
  organization = {The {Go} Blog},
  year         = {2022},
  month        = {4},
  day          = {19},
  url          = {https://go.dev/blog/survey2021-results},
  urldate      = {2023-11-24}
}

@online{survey2020,
  title        = {{Go} Developer Survey 2020 Results},
  author       = {Merrick, Alice},
  organization = {The {Go} Blog},
  year         = {2021},
  month        = {3},
  day          = {9},
  url          = {https://go.dev/blog/survey2020-results},
  urldate      = {2023-11-24}
}

@online{survey2019,
  title        = {{Go} Developer Survey 2019 Results},
  author       = {Todd Kulesza},
  organization = {The {Go} Blog},
  year         = {2020},
  month        = {4},
  day          = {20},
  url          = {https://go.dev/blog/survey2019-results},
  urldate      = {2023-11-24}
}

@article{fj,
  author     = {Igarashi, Atshushi and Pierce, Benjamin and Wadler, Philip},
  title      = {Featherweight {Java}: A Minimal Core Calculus for {Java} and {GJ}},
  year       = {1999},
  issue_date = {Oct. 1999},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {34},
  number     = {10},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/320385.320395},
  doi        = {10.1145/320385.320395},
  abstract   = {Several recent studies have introduced lightweight versions of Java: reduced languages in which complex features like threads and reflection are dropped to enable rigorous arguments about key properties such as type safety. We carry this process a step further, omitting almost all features of the full language (including interfaces and even assignment) to obtain a small calculus, Featherweight Java, for which rigorous proofs are not only possible but easy.Featherweight Java bears a similar relation to full Java as the lambda-calculus does to languages such as ML and Haskell. It offers a similar computational “feel,” providing classes, methods, fields, inheritance, and dynamic typecasts, with a semantics closely following Java's. A proof of type safety for Featherweight Java thus illustrates many of the interesting features of a safety proof for the full language, while remaining pleasingly compact. The syntax, type rules, and operational semantics of Featherweight Java fit on one page, making it easier to understand the consequences of extensions and variations.As an illustration of its utility in this regard, we extend Featherweight Java with generic classes in the style of GJ (Bracha, Odersky, Stoutamire, and Wadler) and sketch a proof of type safety. The extended system formalizes for the first time some of the key features of GJ.},
  journal    = {{SIGPLAN Not.}},
  month      = {10},
  pages      = {132-146},
  numpages   = {15},
  keywords   = {language design, implementation, theoretical foundations}
}
